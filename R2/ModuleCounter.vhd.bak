library ieee;
use ieee.std_logic_1164.all;
use ieee.math_real.all;

entity ModuleCounter is
	generic(
		module: integer := 60;
		resetValue: integer := 0);
	port (
		--control
		clk, reset, load, enb: in std_logic;
		--data
		in00: in std_logic_vector(integer(ceil(log2(real(module))))-1 downto 0);
		dataout: out std_logic_vector(integer(ceil(log2(real(module))))-1 downto 0));
end entity;


architecture behv of ModuleCounter is
	subtype State is std_logic_vector(integer(ceil(log2(real(module))))-1 downto 0);
	signal currentState, nextState: State;
begin
	-- nextState logic
	nextState <= in00 + '1' when load='1' and enb='1' else currentState;
	
	-- internal state logic
	if (reset='1') then
		currentState <= std_logic_vector(to_signed(resetValue, currentState'length));
	elsif (rising_edge(clk)) then
		currentState <= nextState;
	end if;

	-- output logic
	dataout <= currentState;
end architecture;